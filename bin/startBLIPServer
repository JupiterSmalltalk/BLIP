#!/bin/bash
#
# ./startBLIPServer runs a BLIP server Gem the class WAGemStoneRunSeasideGems
#   determines whether a BLIP or WebSocket adaptor is used
#     - first argument is a label used to name files
#     - second argument is the BLIPServerClass type
#     - third argument is the BLIPDelegateClass type
#     - fourth argument is a port number
#

if [ -s $GEMSTONE/seaside/etc/gemstone.secret ]; then
    . $GEMSTONE/seaside/etc/gemstone.secret
else
    echo 'Missing password file $GEMSTONE/seaside/etc/gemstone.secret'
    exit 1
fi

# Requires a server type label as a parameter
if [ "a$1" = "a" ]; then
        echo 'Missing argument <serverName label>'
        exit 1
fi

# Requires a BLIPServerClass type as a parameter
if [ "a$2" = "a" ]; then
        echo 'Missing argument <BLIPServerClass type>'
        exit 1
fi

# Requires a BLIPDelegateClass type as a parameter
if [ "a$3" = "a" ]; then
        echo 'Missing argument <BLIPDelegateClass type>'
        exit 1
fi

# Requires a port number as a parameter
if [ "a$4" = "a" ]; then
        echo 'Missing argument <server port number>'
        exit 1
fi

cat << EOF | nohup $GEMSTONE/bin/topaz -u "BLIP-$1-$4" -l -e $GEMSTONE/seaside/etc/seaside30.conf 2>&1 >> $BLIP/log/${1}_server-${4}.log &

set user DataCurator pass $GEMSTONE_CURATOR_PASS gems $GEMSTONE_NAME

display oops
iferror where

login

run
"record gems pid in the pid file"
| file |
(GsFile isServerDirectory: '$BLIP/run') ifFalse: [ ^nil ].
file := GsFile openWriteOnServer: '$BLIP/run/${1}_server-${4}.pid'.
file nextPutAll: (System gemVersionReport at: 'processId') printString.
file cr.
file close.
%

run
| x |
"set _cacheName: for Gem to get unique id in statmon output. see http://code.google.com/p/glassdb/issues/detail?id=132"
System _cacheName: ((x := 'BLIP-$1-$2-' , (GsSession serialOfSession: System session) printString , '-' , System myUserProfile userId) copyFrom: 1 to: (x size min: 31)).
%

run

GsProcess usingNativeCode not
  ifTrue: [
    "Enable remote Breakpoing handling"
    Breakpoint trappable: true.
    GemToGemAnnouncement installStaticHandler.
    System commitTransaction ifFalse: [ nil error: 'Could not commit for GemToGemSignaling' ]. 
  ].

System transactionMode: #manualBegin.

Exception 
  installStaticException: 
    [:ex :cat :num :args |
      "Run the abort in a lowPriority process, since we must acquire the
       transactionMutex."
      [
        GRPlatform current transactionMutex 
          critical: [ 
            GRPlatform current doAbortTransaction ].
        System enableSignaledAbortError.
      ] forkAt: Processor lowestPriority.
    ]
  category: GemStoneError
  number: 6009
  subtype: nil.
System enableSignaledAbortError.
"This thread is needed to handle the SigAbort exception, when the primary
 thread is blocked on an accept. Assuming default 60 second 
 STN_GEM_ABORT_TIMEOUT, wake up at 30 second intervals."
[ 
  [ true ] whileTrue: [ (Delay forSeconds: 30) wait ].
] forkAt: Processor lowestPriority.


GsFile gciLogServer: '$1 Server started on port ', $4 printString.

BLIPRunServerGems startBLIPServer: $2 delegate: $3 on: $4.
"does not return"
%
run
GemToGemAnnouncement uninstallStaticHandler.
System beginTransaction.
(ObjectLogEntry
  fatal: '$1: topaz exit'
  object:
    'port: ', $4 printString, ' ',
    'pid: ', (System gemVersionReport at: 'processId') printString) addToLog.
System commitTransaction.
%
EOF

